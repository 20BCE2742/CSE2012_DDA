#include <iostream>
using namespace std;
int main() {
  int n;
  cout<<"enter the number of elements ";
  cin>>n;
  int arr[n];
  cout<<"enter the elements ";
  for(int i=0;i<n;i++)
  {
    cin>>arr[i];
  }
  for (int step = 0; step < (n-1); ++step) 
  {
    for (int i = 0; i < n - (step-1); ++i)
    {
      if (arr[i] > arr[i + 1]) 
      {        
        int temp = arr[i];
        arr[i] = arr[i + 1];
        arr[i + 1] = temp;
      }
    }
  }
  int x;
  cout<<"enter the index you want to find ";
  cin>>x;
  if(x>=n)
  {
    cout<<"index out of bounds(INVALID INDEX)";
  }
  else
  cout<<arr[x-1];
}


#include <iostream>
using namespace std;
int main() {
  int n;
  int fact(int n);
  cin>>n;
  int ans=fact(n);
  cout<<ans;
}
int fact(int n)
{
if(n<0)    
return(-1);      
if(n==0)    
return(1);      
else    
  {    
  return(n*fact(n-1));  
  }
}


#include <iostream>
using namespace std;


void swap(int arr[],int a, int b) {
  int temp = arr[a];
  arr[a] = arr[b];
  arr[b] = temp;
}


void printArray(int array[], int size) 
{
  int i;
  for (i = 0; i < size; i++)
    cout << array[i] << " ";
  cout << endl;
}


int partition(int array[], int low, int high) 
{
  int pivot = array[high];
   
  int i = (low - 1);

  for (int j = low; j < high; j++) 
  {
    if (array[j] <= pivot) 
    {
      i++;
      swap(array,i,j);
    }
  }
  swap(array,i + 1, high);
  return (i + 1);
}

void quickSort(int array[], int low, int high) 
{
  if (low < high) 
  {
    int pi = partition(array, low, high);
    quickSort(array, low, pi - 1);
    quickSort(array, pi + 1, high);
  }
}

int main()
 {
   int n;
   cout<<"enter the number of element";
   cin>>n;
  cout<<"enter the elements ";
  int data[n];
  for(int i=0;i<n;i++)
  {
    cin>>data[i];
  }
  
  cout << "Unsorted Array: \n";
  printArray(data, n);
  
  quickSort(data, 0, n - 1);
  
  cout << "Sorted array in ascending order: \n";
  printArray(data, n);
}
